/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MenuMVC;

import TableMVC.PersonModel;
import TableMVC.PersonTableViewPanel;
import components.PersonDAOXMLRPCServer;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Ricky
 */
public class Menu extends javax.swing.JFrame {
    private PersonTableViewPanel view;
    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
    }
    
    private String inputServerAddress(){
        return javax.swing.JOptionPane.showInputDialog(this, "Server Address", 
                    "Input Server Address", javax.swing.JOptionPane.QUESTION_MESSAGE);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu3 = new javax.swing.JMenu();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        menu = new javax.swing.JMenu();
        JDBC = new javax.swing.JMenuItem();
        Manual = new javax.swing.JMenuItem();
        rmi = new javax.swing.JMenuItem();
        xmlrpc = new javax.swing.JMenuItem();
        xmlrpcphp = new javax.swing.JMenuItem();
        Mode = new javax.swing.JMenu();
        simple = new javax.swing.JMenuItem();
        sorting = new javax.swing.JMenuItem();
        filter = new javax.swing.JMenuItem();
        tfte = new javax.swing.JMenuItem();

        jMenu3.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(670, 500));
        setSize(new java.awt.Dimension(496, 409));

        menu.setText("File");

        JDBC.setText("JDBC");
        JDBC.setActionCommand("jdbc");
        JDBC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JDBCActionPerformed(evt);
            }
        });
        menu.add(JDBC);

        Manual.setText("Manual");
        Manual.setActionCommand("manual");
        Manual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManualActionPerformed(evt);
            }
        });
        menu.add(Manual);

        rmi.setText("RMI");
        rmi.setActionCommand("jdbcrmi");
        rmi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmiActionPerformed(evt);
            }
        });
        menu.add(rmi);

        xmlrpc.setText("XML-RPC");
        xmlrpc.setActionCommand("xmlrpc");
        xmlrpc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xmlrpcActionPerformed(evt);
            }
        });
        menu.add(xmlrpc);

        xmlrpcphp.setText("XML-RPC-PHP");
        xmlrpcphp.setActionCommand("xmlrpcphp");
        xmlrpcphp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xmlrpcphpActionPerformed(evt);
            }
        });
        menu.add(xmlrpcphp);

        jMenuBar2.add(menu);

        Mode.setText("Mode");

        simple.setText("Render");
        simple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleActionPerformed(evt);
            }
        });
        Mode.add(simple);

        sorting.setText("Sorting");
        sorting.setName("sorting"); // NOI18N
        sorting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortingActionPerformed(evt);
            }
        });
        Mode.add(sorting);

        filter.setText("Filter");
        filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterActionPerformed(evt);
            }
        });
        Mode.add(filter);

        tfte.setText("TFTE");
        tfte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfteActionPerformed(evt);
            }
        });
        Mode.add(tfte);

        jMenuBar2.add(Mode);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(jLabel1)
                .addContainerGap(671, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jLabel1)
                .addContainerGap(357, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JDBCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JDBCActionPerformed
        //actionPerformed(evt);

        PersonModel model = new PersonModel(evt.getActionCommand());
        PersonController controller = new PersonController();
        view = new PersonTableViewPanel();
        view.setOpaque(true);
        setContentPane(view);
        model.addObserver(view);
        controller.addModel(model);
        controller.addView(view);
        controller.initTableModel();
        controller.activateView();
        setVisible(true);
    }//GEN-LAST:event_JDBCActionPerformed

    private void ManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ManualActionPerformed
        //actionPerformed(evt);
        PersonModel model = new PersonModel(evt.getActionCommand());
        PersonController controller = new PersonController();
        view = new PersonTableViewPanel();
        view.setOpaque(true);
        setContentPane(view);
        model.addObserver(view);
        controller.addModel(model);
        controller.addView(view);
        controller.initTableModel();
        controller.activateView();
        setVisible(true);
    }//GEN-LAST:event_ManualActionPerformed
        
    private int modelActive = 0;
    
    private void rmiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmiActionPerformed
       // actionPerformed(evt);
        PersonModel model = null;
        if (javax.swing.JOptionPane.showConfirmDialog(this,
                "Do you want to start RMI as Server",
                "RMI: Server Confirmation",
                javax.swing.JOptionPane.YES_NO_OPTION,
                javax.swing.JOptionPane.WARNING_MESSAGE) == javax.swing.JOptionPane.YES_OPTION) {
            
            //Untuk memanggil Server dari RMI
            if(modelActive==1){
                javax.swing.JOptionPane.showMessageDialog(rootPane, "RMI Service is active", 
                        "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                model=new PersonModel("rmiclient");
            } else 
                model = new PersonModel(evt.getActionCommand());
            modelActive=1;
            
        //Untuk memanggil Client dari RMI
        } else {
            String serverAddress = inputServerAddress();
            try {
                //Memulai Client RMI
                model = new PersonModel("rmiclient", serverAddress);
            } catch (NotBoundException ex) {
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        //Inisiasi dari controller Person
        PersonController controller = new PersonController();
        view = new PersonTableViewPanel();
        view.setOpaque(true);
        setContentPane(view);
        model.addObserver(view);
        //Untuk menambah model dari Controller
        controller.addModel(model);
        controller.addView(view);
        controller.initTableModel();
        controller.activateView();
//        controller.
        setVisible(true);
        
    }//GEN-LAST:event_rmiActionPerformed

    private void xmlrpcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xmlrpcActionPerformed
        // TODO add your handling code here:
        //Ini tombol untuk memilih XMLRPC 
        PersonModel model;// = new PersonModel(evt.getActionCommand());
        PersonDAOXMLRPCServer xmlrpcServer;
       
        if (javax.swing.JOptionPane.showConfirmDialog(this,
                "Do you want to start XMLRPC as Server",
                "XMLRPC: Server Confirmation",
                javax.swing.JOptionPane.YES_NO_OPTION,
                javax.swing.JOptionPane.WARNING_MESSAGE) == javax.swing.JOptionPane.YES_OPTION) {
            //Untuk memanggil Server dari XMLRPC
            if(modelActive==1){
                javax.swing.JOptionPane.showMessageDialog(rootPane, "XMLRPC Service is active", 
                        "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                model=new PersonModel(evt.getActionCommand());
            } else 
                //Untuk memanggil Client dari XMLRPC
                xmlrpcServer = new PersonDAOXMLRPCServer();
                model = new PersonModel(evt.getActionCommand());
            modelActive=1;
            
            
        } else {
            model = new PersonModel(evt.getActionCommand());

        }
        
        //Inisiasi dari controller Person
        PersonController controller = new PersonController();
        view = new PersonTableViewPanel();
        view.setOpaque(true);
        setContentPane(view);
        model.addObserver(view);
        controller.addModel(model);
        controller.addView(view);
        controller.initTableModel();
        controller.activateView();
        setVisible(true);
    }//GEN-LAST:event_xmlrpcActionPerformed

    private void xmlrpcphpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xmlrpcphpActionPerformed
        // TODO add your handling code here:
        //Ini action tombol untuk memilih XMLRPCPHP
        PersonModel model = new PersonModel(evt.getActionCommand());
        PersonController controller = new PersonController();
        view = new PersonTableViewPanel();
        view.setOpaque(true);
        setContentPane(view);
        model.addObserver(view);
        controller.addModel(model);
        controller.addView(view);
        controller.initTableModel();
        controller.activateView();
        setVisible(true);
    }//GEN-LAST:event_xmlrpcphpActionPerformed

    private void sortingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortingActionPerformed
        view.modeTable("sorting");
    }//GEN-LAST:event_sortingActionPerformed

    private void simpleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpleActionPerformed
        view.modeTable("render");
    }//GEN-LAST:event_simpleActionPerformed

    private void tfteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfteActionPerformed
        view.modeTable("tfte");
    }//GEN-LAST:event_tfteActionPerformed

    private void filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterActionPerformed
        view.modeTable("filter");
    }//GEN-LAST:event_filterActionPerformed
    /*
    private void actionPerformed(java.awt.event.ActionEvent evt){
        PersonModel model = new PersonModel(evt.getActionCommand());
        PersonController controller = new PersonController();
        view = new PersonTableViewPanel();
        view.setOpaque(true);
        setContentPane(view);
        model.addObserver(view);
        controller.addModel(model);
        controller.addView(view);
        controller.initTableModel();
        controller.activateView();
        setVisible(true);
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem JDBC;
    private javax.swing.JMenuItem Manual;
    private javax.swing.JMenu Mode;
    private javax.swing.JMenuItem filter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenu menu;
    private javax.swing.JMenuItem rmi;
    private javax.swing.JMenuItem simple;
    private javax.swing.JMenuItem sorting;
    private javax.swing.JMenuItem tfte;
    private javax.swing.JMenuItem xmlrpc;
    private javax.swing.JMenuItem xmlrpcphp;
    // End of variables declaration//GEN-END:variables
}
