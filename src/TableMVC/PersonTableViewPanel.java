/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TableMVC;
import MenuMVC.Menu;
import components.Person;
import java.awt.Component;
import java.util.Observable;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableRowSorter;
import javax.swing.table.TableModel;
import tambahan.IntegerEditor;

/**
 *
 * @author Ricky
 */
public class PersonTableViewPanel extends javax.swing.JPanel implements java.util.Observer{

    
    private boolean DEBUG = true;
    private Person prs;
    private AbstractTableModel model;
    private ControllerInterface controller;
    private TableRowSorter<TableModel> sorter;
    
    /**
     * Creates new form PersonTableViewPanel
     */
    public PersonTableViewPanel(){
        
    }

    
    public void addController(ControllerInterface c){
        this.controller = c;
    }
    
    //Method untuk inisiasi componen view
    public void activate(){
        initComponents();
        super.setVisible(true);
        FilterTxt.setVisible(false);
        FilterButton.setVisible(false);
        tablePerson.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                int viewRow = tablePerson.getSelectedRow();
                int viewCol = tablePerson.getSelectedColumn();
                if (viewRow >= 0){
                    //int modelRow = tablePerson.convertRowIndexToModel(viewRow);
                    lPersonId.setText(tablePerson.getValueAt(viewRow,0).toString());
                    lPersonId.setVisible(false);
                    firstName.setText(tablePerson.getValueAt(viewRow, 1).toString());
                    lastName.setText(tablePerson.getValueAt(viewRow, 2).toString());
                    sport.setText(tablePerson.getValueAt(viewRow, 3).toString());
                    year.setText(tablePerson.getValueAt(viewRow, 4).toString());
                    isVegetarian.setSelected(tablePerson.getValueAt(viewRow, 5).equals(true));
                }
            }
        });
    }
    
    //Method untuk mengeset tabel model
    public void setTableModel(AbstractTableModel mdl){
        this.model = mdl;
    }
    
    //Method untuk mengeset mode tabel
    public void modeTable(String mode){
        switch(mode){
            //Jika memilih untuk mode render tabel
            case "render" :
                tablePerson.setDefaultEditor(Integer.class,null);
                FilterTxt.setVisible(false);
                FilterButton.setVisible(false);
                tablePerson.getTableHeader().setEnabled(false);
                //initRender(tablePerson);
                setRenderBox(tablePerson, tablePerson.getColumnModel().getColumn(3));
                break;
            //Jika memilih untuk mode filter tabel
            case "filter" :
                FilterTxt.setVisible(true);
                FilterButton.setVisible(true);
                sorter = new TableRowSorter<>(model);
                tablePerson.setRowSorter(sorter);
                tablePerson.getTableHeader().setEnabled(false);
                break;
            //Jika memilih untuk mode tfte
            case "tfte" :
                tablePerson.setDefaultEditor(Integer.class,new IntegerEditor(0, 100));
                FilterTxt.setVisible(false);
                FilterButton.setVisible(false);
                tablePerson.getTableHeader().setEnabled(false);
                break;
            //Jika memilih untuk mode sorting pada tabel
            case "sorting" :
                tablePerson.getTableHeader().setEnabled(true);
                tablePerson.setAutoCreateRowSorter(true);
                FilterTxt.setVisible(false);
                FilterButton.setVisible(false);
                break;
        }
    }
    
    @Override
    //Method untuk melakukan update
    public void update(Observable o, Object arg) {
        System.out.println("update fired");
        model.fireTableDataChanged();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablePerson = new javax.swing.JTable();
        firstNameLbl = new javax.swing.JLabel();
        firstName = new javax.swing.JTextField();
        lastName = new javax.swing.JTextField();
        lastNameLbl = new javax.swing.JLabel();
        sportLbl = new javax.swing.JLabel();
        sport = new javax.swing.JTextField();
        yearLbl = new javax.swing.JLabel();
        year = new javax.swing.JTextField();
        isVegetarian = new javax.swing.JCheckBox();
        addBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        lPersonId = new javax.swing.JLabel();
        exitButton = new javax.swing.JButton();
        FilterTxt = new javax.swing.JTextField();
        FilterButton = new javax.swing.JButton();

        tablePerson.setModel(model);
        jScrollPane1.setViewportView(tablePerson);

        firstNameLbl.setText("First Name :");

        lastNameLbl.setText("Last Name :");

        sportLbl.setText("Sport          :");

        yearLbl.setText("Year           :");

        isVegetarian.setText("Is Vegetarian");

        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        resetBtn.setText("Reset");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        FilterButton.setText("Filter");
        FilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(sportLbl)
                                    .addGap(18, 18, 18)
                                    .addComponent(sport))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(firstNameLbl)
                                    .addGap(18, 18, 18)
                                    .addComponent(firstName, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(isVegetarian)
                            .addComponent(FilterButton, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lastNameLbl)
                                .addGap(18, 18, 18)
                                .addComponent(lastName, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(yearLbl)
                                .addGap(18, 18, 18)
                                .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lPersonId)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addBtn)
                                .addGap(18, 18, 18)
                                .addComponent(updateBtn)
                                .addGap(18, 18, 18)
                                .addComponent(deleteBtn)
                                .addGap(18, 18, 18)
                                .addComponent(resetBtn)
                                .addGap(18, 18, 18)
                                .addComponent(exitButton))
                            .addComponent(FilterTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameLbl)
                    .addComponent(firstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastNameLbl)
                    .addComponent(lastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sportLbl)
                    .addComponent(sport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearLbl)
                    .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(isVegetarian)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lPersonId)
                        .addGap(32, 32, 32)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FilterButton)
                    .addComponent(FilterTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBtn)
                    .addComponent(updateBtn)
                    .addComponent(deleteBtn)
                    .addComponent(resetBtn)
                    .addComponent(exitButton))
                .addContainerGap(22, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        //Ini action untuk menambah data ke tabel
        prs = new Person();
        //int id = controller.getAllPersons().size()+1;
        //prs.setPersonID(new Integer(LpersonID.getText()));
        prs.setFirstName(firstName.getText());
        prs.setLastName(lastName.getText());
        prs.setSport(sport.getText());
        prs.setYears(new Integer(year.getText()));
        prs.setVeg(isVegetarian.isSelected());
        controller.addPerson(prs);
    }//GEN-LAST:event_addBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        //Ini action untuk melakukan update tabel
        System.out.println("update row: "+tablePerson.getSelectedRow());
        prs = controller.getPerson(tablePerson.getSelectedRow());
        prs.setPersonID(new Integer(lPersonId.getText()));
        prs.setFirstName(firstName.getText());
        prs.setLastName(lastName.getText());
        prs.setSport(sport.getText());
        prs.setYears(new Integer(year.getText()));
        prs.setVeg(isVegetarian.isSelected());
        controller.updatePerson(prs);
        clearText();
    }//GEN-LAST:event_updateBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        //Ini action untuk menghapus data
        System.out.println("delete row: "+tablePerson.getSelectedRow());
        controller.deletePerson(controller.getPerson(tablePerson.getSelectedRow()));
        clearText();
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        clearText();
        sorter.setRowFilter(null);
    }//GEN-LAST:event_resetBtnActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
       this.setVisible(false);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void FilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterButtonActionPerformed
        //Ini Action untuk melakukan filtering pada tabel
        String text = FilterTxt.getText();
        if(text.length()==0){
            sorter.setRowFilter(null);
        }
        else{
            sorter.setRowFilter(RowFilter.regexFilter(text));
        }
    }//GEN-LAST:event_FilterButtonActionPerformed

    private void clearText(){
        firstName.setText("");
        lastName.setText("");
        sport.setText("");
        year.setText("");
        isVegetarian.setSelected(false);
        FilterTxt.setText("");
    }
        
    public void setRenderBox(JTable table,
                                 TableColumn sportColumn) {
        //Set up the editor for the sport cells.
        JComboBox comboBox = new JComboBox();
        comboBox.addItem("Snowboarding");
        comboBox.addItem("Rowing");
        comboBox.addItem("Knitting");
        comboBox.addItem("Speed reading");
        comboBox.addItem("Pool");
        comboBox.addItem("None of the above");
        sportColumn.setCellEditor(new DefaultCellEditor(comboBox));

        //Set up tool tips for the sport cells.
        DefaultTableCellRenderer renderer =
                new DefaultTableCellRenderer();
        renderer.setToolTipText("Click for combo box");
        sportColumn.setCellRenderer(renderer);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton FilterButton;
    private javax.swing.JTextField FilterTxt;
    private javax.swing.JButton addBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton exitButton;
    private javax.swing.JTextField firstName;
    private javax.swing.JLabel firstNameLbl;
    private javax.swing.JCheckBox isVegetarian;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lPersonId;
    private javax.swing.JTextField lastName;
    private javax.swing.JLabel lastNameLbl;
    private javax.swing.JButton resetBtn;
    private javax.swing.JTextField sport;
    private javax.swing.JLabel sportLbl;
    private javax.swing.JTable tablePerson;
    private javax.swing.JButton updateBtn;
    private javax.swing.JTextField year;
    private javax.swing.JLabel yearLbl;
    // End of variables declaration//GEN-END:variables
}
